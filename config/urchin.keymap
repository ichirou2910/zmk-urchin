/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "helper.h"

// Layer definitions
#define BASE 0
#define NAV 1
#define FUNC 2
#define NUM 3
#define CONFIG 4
#define MEDIA 5
// -----------------

#define QUICK_TAP_MS 175

&sk {
  release-after-ms = <900>;
  quick-release;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
	ZMK_HOLD_TAP(NAME, \
		bindings = <HOLD>, <TAP>; \
		flavor = "balanced"; \
		tapping-term-ms = <280>; \
		quick-tap-ms = <QUICK_TAP_MS>; \
		require-prior-idle-ms = <150>; \
		hold-trigger-on-release; \
		hold-trigger-key-positions = <TRIGGER_POS>; \
	)
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)

// Magic Shift
// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift,
	bindings = <&kp>, <&magic_shift_tap>;
	flavor = "balanced";
	tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
)
ZMK_MOD_MORPH(magic_shift_tap,
	bindings = <&shift_repeat>, <&caps_word>;
	mods = <(MOD_LSFT)>;
)
ZMK_ADAPTIVE_KEY(
    shift_repeat,
	bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };
)
&caps_word {
  /delete-property/ ignore-modifiers;
};

/ {
	combos {
		compatible = "zmk,combos";
		// Z+X
		combo_escape {
			timeout-ms = <50>;
			key-positions = <20 21>;
			bindings = <&kp ESC>;
		};
		// both left thumb keys
		combo_settings {
			timeout-ms = <200>;
			key-positions = <30 31>;
			bindings = <&mo CONFIG>;
		};
		// both left thumb keys
		combo_media {
			timeout-ms = <200>;
			key-positions = <32 33>;
			bindings = <&mo MEDIA>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		// Base alpha layer
		default_layer {
			label = "Base";
			bindings = <
			&kp Q       &kp W       &kp E        &kp R        &kp T          &kp Y       &kp U        &kp I        &kp O       &kp P 
			&hml LGUI A &hml LALT S &hml LCTRL D &hml LSHFT F &kp G          &kp H       &hmr RSHFT J &hmr LCTRL K &hmr LALT L &hmr LGUI SEMI
			&kp Z       &kp X       &kp C        &kp V        &kp B          &kp N       &kp M        &kp COMMA    &kp DOT     &kp FSLH
							                  	 &lt 1 TAB    &lt 2 SPACE    &lt 3 ENTER MAGIC_SHIFT
			>;
		};

		// Navigation
		nav_layer {
			label = "Nav";
			bindings = <
			&none     &none     &none     &none      &none		   &kp PG_UP &kp BSPC &kp UP    &kp DEL   &none
			&kp LGUI  &kp LALT  &kp LCTRL &kp LSHIFT &none 		   &kp TAB   &kp LEFT &kp DOWN  &kp RIGHT &none
			&kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V)  &none         &kp PG_DN &kp HOME &none     &kp END   &none
										  &none      &none    	   &none     &none 
			>;
		};

		// Function keys with modifiers
		func_layer {
			label = "Func";
			bindings = <
			&kp F12 &kp F7 &kp F8 &kp F9 &kp PSCRN         &none &none      &none     &none    &none
			&kp F11 &kp F4 &kp F5 &kp F6 &none             &none &kp LSHIFT &kp LCTRL &kp LALT &kp LGUI
			&kp F10 &kp F1 &kp F2 &kp F3 &none     		   &none &none      &none     &none    &none
							      &none  &none             &none &none  
			>;
		};

		// Numbers and symbols
		num_layer {
			label = "Num";
			bindings = <
			&kp LBKT  &kp N7 &kp N8 &kp N9 &kp RBKT             &none &none      &none     &none    &none
			&kp SQT   &kp N4 &kp N5 &kp N6 &kp EQUAL   			&none &kp LSHIFT &kp LCTRL &kp LALT &kp LGUI
			&kp GRAVE &kp N1 &kp N2 &kp N3 &kp BSLH     		&none &none      &none     &none    &none
							        &kp N0 &kp MINUS            &none &none  
			>;
		};

		// Used to change the keyboard's settings.
		config_layer {
			label = "Conf";
			bindings = <
			&bootloader &none &none &bt BT_CLR &bt BT_SEL 0         &bt BT_SEL 3 &none &none &none &bootloader 
			&none       &none &none &none      &bt BT_SEL 1   	    &bt BT_SEL 4 &none &none &none &none
			&none       &none &none &none      &bt BT_SEL 2         &bt BT_SEL 5 &none &none &none &none
									&none      &none                &none        &none 
			>;
		};

		// Media controls
		media_layer {
			label = "Media";
			bindings = <
			&none     &none     &none     &none       &none			&none     &kp C_PP   &kp C_VOLUME_UP   &kp C_MUTE &none
			&kp LGUI  &kp LALT  &kp LCTRL &kp LSHIFT  &none 		&none     &kp C_PREV &kp C_VOLUME_DOWN &kp C_NEXT &none
			&none     &none     &none     &none       &none			&none     &none      &none             &none      &none
										  &none       &none    		&none     &none
			>;
		};
	};
};
